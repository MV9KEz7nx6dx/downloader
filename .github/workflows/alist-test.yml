name: testuploadtoalist
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Url:
        description: '下载URL'
        required: true
        default: 'https://网址##名称'
      Folder:
        description: '保存目录'
        required: true
        default: 'encrypt_folder'

env:
  FILE_PATH: 'downloads'
  
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 

      - uses: docker-practice/actions-setup-docker@master
        timeout-minutes: 12
          
      # - name: 增加可用空间 (删除dotnet, android、haskell、CodeQL)
      #   shell: bash
      #   run: |
      #     sudo rm -rf /usr/share/dotnet
      #     sudo rm -rf /usr/local/lib/android
      #     sudo rm -rf /opt/ghc
      #     sudo rm -rf /opt/hostedtoolcache/CodeQL
          
      - name: Config Alist
        run: |
          printf "$ALIST_CONFIG" >> config.json
          docker run -d --restart=always -v /etc/alist:${{github.workspace}}/ -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 -e ALIST_ADMIN_PASSWORD='admin' --name="alist" --net=host xhofe/alist:latest
          
      
      - name: 检查空间使用情况
        run: |
          echo "Free space:"
          df -h

      - name: Aria2 Install
        run: |
            apt update
            apt install -y aria2 nodejs curl
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          

      - name: Test for list files
        run: |
          curl -o webdavtest.txt -X PROPFIND -u 'admin:admin'  http://localhost:5244/dav/hefamily/
          cat webdavtest.txt
        
      # - name: install prerequisites
      #   run: |
      #     python -m pip install --upgrade pip wheel
      #     pip install install lk21==1.5.61 pymongo pymongo[srv] pymongo[tls] certifi
          
      # - name: Download remote archive
      #   run: |
      #     curl -L -o dist.tar.gz https://github.com/ykxVK8yL5L/alist-encrypt/releases/download/0.0.2/dist.tar.gz
          
      # - name: Extract archive
      #   run: |
      #     tar -xzf dist.tar.gz
          
      # - name: Downloading
      #   id: downloading
      #   run: |
      #     mkdir downloads
      #     python transfer.py  --con="${{ secrets.DB_CONNECT }}" --isnow=1
      #     filename=$(ls downloads | head -n1)
      #     echo "::set-output name=path::downloads/$filename"
      #     echo "::set-output name=filename::$filename"
      #     size=$(ls -l downloads/$filename | awk '{print $5}' )
      #     echo $size
      #     echo "::set-output name=size::$size"
      
      # - name: Encrypt
      #   id: encrypt
      #   if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
      #   run: |
      #      ${{ github.workspace }}/build/alist-encrypt-linux '${{ secrets.ALIST_ENCRYPT_PASSWORD }}' aesctr enc '${{ github.workspace }}/downloads/' '${{ github.workspace }}/out/' encName
      #      filename=$(ls out | head -n1)
      #      size=$(ls -l out/$filename | awk '{print $5}' )
      #      echo $size
      #      extension=$(awk 'BEGIN{srand();}{a[NR]=$0}END{print a[int(rand()*NR)+1]}' suffixes | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      #      filename_no_suffix="${filename%.*}"
      #      newfilename="$filename_no_suffix"."$extension"
      #      if [ "$filename" != "$newfilename" ]; then
      #       	mv out/$filename out/$newfilename
      #      fi
      #      sha1_s=`openssl sha1 out/$newfilename | awk '{ print $2 }'`
      #      header="OC-Checksum:sha1:$sha1_s"
      #      echo "::set-output name=header::$header"
      #      echo "::set-output name=filename::$newfilename"
      #      echo "::set-output name=path::out/$newfilename"
      #      size=$(ls -l out/$newfilename | awk '{print $5}' )
      #      echo $size
      #      echo "::set-output name=size::$size"






          
      # - name: Mount Alist
      #   id: mount
      #   if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
      #   run: |
      #     python alist.py --fileName="${{ steps.downloading.outputs.filename }}"  --path="${{ steps.downloading.outputs.path }}" --storage_body="${{ secrets.ALIST_STORAGE_BODY }}"
          
#       - name: Rclone Copy
#         uses: wei/rclone@v1
#         if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
#         env:
#           RCLONE_CONF: ${{ secrets.RCLONE_ALIYUN_CONF }}
#         with:
#           args: copy ${{ steps.downloading.outputs.path }} alist:/encrypt_folder
          
      # - name: Save Data
      #   id:  database
      #   if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
      #   run: |
      #     python deltransfer.py --con="${{ secrets.DB_CONNECT }}" --name="${{ steps.downloading.outputs.filename }}" --size="${{ steps.downloading.outputs.size }}"
      #     echo "::set-output name=status::ok"
          
      # - name: Download another right now
      #   uses: benc-uk/workflow-dispatch@v1
      #   if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
      #   with:
      #     workflow: 1PikPAK2Alist
      #     token: ${{ secrets.TOKEN }}
      #     ref: main

      # - name: Notify upload info to mqtt broker
      #   if: steps.database.outputs.status != '' && !cancelled() && !failure()
      #   uses: juhrlass/mqtt-action@master
      #   with:
      #     protocol: mqtt
      #     host: broker-cn.emqx.io
      #     port: 1883
      #     topic: ${{ secrets.SYNC_TOPIC }}
      #     message: 'ok'
      #     username: ''
      #     password: ''

      # - name: Delete workflow runs
      #   uses: Mattraks/delete-workflow-runs@v1.2.3
      #   with:
      #     token: ${{ github.token }}
      #     repository: ${{ github.repository }}
      #     retain_days: 0
      #     keep_minimum_runs: 0
