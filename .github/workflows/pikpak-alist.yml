name: 1PikPAK2Alist
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Url:
        description: '下载URL'
        required: true
        default: 'https://网址##名称'
      Folder:
        description: '保存目录'
        required: true
        default: 'encrypt_folder'

env:
  FILE_PATH: 'downloads'
  
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    container: ubuntu
    services:
      alist:
        image: xhofe/alist
        env:
          ALIST_ADMIN_PASSWORD: 'admin'
        ports:
        - 5244:5244
      alist-encrypt:
        image: ykxvk8yl5l/alist-encrypt:dev
        env:
          DAV_PASSWORD: '${{ secrets.ALIST_ENCRYPT_PASSWORD }}'
          DAV_ENCNAME: true
          DAV_ENABLE_OTHER: false
        ports:
        - 5344:5344
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 
          
      - name: Aria2 Install
        run: apt-get update; apt-get install aria2 -y 
        
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
        
      - name: Install prerequisites
        run: |
          python -m pip install --upgrade pip wheel
          pip install requests lk21==1.5.61 pymongo pymongo[srv] pymongo[tls] certifi
      
      - name: Downloading
        id: downloading
        run: |
          python transfer.py  --con="${{ secrets.DB_CONNECT }}" --isnow=1
          filename=$(ls downloads | head -n1)
          echo "::set-output name=path::downloads/$filename"
          echo "::set-output name=filename::$filename"
          size=$(ls -l downloads/$filename | awk '{print $5}' )
          echo "::set-output name=size::$size"
      - name: Mount Alist
        id: mount
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        run: |
          python alist.py --fileName="${{ steps.downloading.outputs.filename }}"  --path="${{ steps.downloading.outputs.path }}" --storage_body="${{ secrets.ALIST_STORAGE_BODY }}"
#       - name: Rclone Copy
#         uses: wei/rclone@v1
#         if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
#         env:
#           RCLONE_CONF: ${{ secrets.RCLONE_ALIYUN_CONF }}
#         with:
#           args: copy ${{ steps.downloading.outputs.path }} alist:/encrypt_folder
          
      - name: Save Data
        id:  database
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        run: |
          python deltransfer.py --con="${{ secrets.DB_CONNECT }}" --name="${{ steps.downloading.outputs.filename }}" --size="${{ steps.downloading.outputs.size }}"
          echo "::set-output name=status::ok"
          
      - name: Download another right now
        uses: benc-uk/workflow-dispatch@v1
        if: steps.downloading.outputs.filename != '' && !cancelled() && !failure()
        with:
          workflow: 1PikPAK2Alist
          token: ${{ secrets.TOKEN }}
          ref: main

      - name: Notify upload info to mqtt broker
        if: steps.database.outputs.status != '' && !cancelled() && !failure()
        uses: juhrlass/mqtt-action@master
        with:
          protocol: mqtt
          host: broker-cn.emqx.io
          port: 1883
          topic: ${{ secrets.SYNC_TOPIC }}
          message: 'ok'
          username: ''
          password: ''

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v1.2.3
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
