name: 加密转存PikPak到阿里云

on:
  repository_dispatch:
#  schedule:
#     - cron: "0 19 * * *"
  workflow_dispatch:
    inputs:
      Url:
        description: 'Download Url'
        required: false
        default: 'false'
#   watch:
#     types: started
env:
  FILE_PATH: 'downloads'
  ALIYUN_WEBDAV_PORT: 5244
  ALIS_ENCRYPT_PORT: 5344
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 
    
    - name: Aria2 Install
      run: sudo apt install -y aria2 
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: install prerequisites
      run: |
        python -m pip install --upgrade pip wheel
        pip install install lk21==1.5.61 pymongo pymongo[srv] pymongo[tls] certifi aliyundrive-webdav
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Downloading
      id: downloading
      run: |
        python download.py  --con="${{ secrets.DB_CONNECT }}" --isnow=1
        filename=$(ls downloads | head -n1)
        echo "::set-output name=path::downloads/$filename"
        echo "::set-output name=filename::$filename"
        size=$(ls -l downloads/$filename | awk '{print $5}' )
        echo "::set-output name=size::$size"
    - name: Clone alist-encrypt
      run: git clone https://github.com/traceless/alist-encrypt
    - name: Install alist-encrypt depences
      run: cd alist-encrypt/node-proxy && npm i 
    - name: Create alist-encrypt config
      run: mkdir alist-encrypt/node-proxy/conf && echo '${{ secrets.ALIST_ENCRYPT }}' > alist-encrypt/node-proxy/conf/config.json
      
    - uses: JarvusInnovations/background-action@v1
    - name: Bootstrap System Under Test (SUT)
      with:
        run: |
          npm install
          
      
    
    - name: rclone
      uses: wei/rclone@v1
      env:
        RCLONE_CONF: ${{ secrets.RCLONE_ALIYUN_CONF }}
      with:
       args: copy ${{ steps.downloading.outputs.path }} aliyun:/

          
    - name: Notify upload info to mqtt broker
      if: steps.database.outputs.status != '' && !cancelled() && !failure()
      uses: juhrlass/mqtt-action@master
      with:
        protocol: mqtt
        host: broker-cn.emqx.io
        port: 1883
        topic: ${{ secrets.SYNC_TOPIC }}
        message: 'ok'
        username: ''
        password: ''

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v1.2.3
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 0
